# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # this machine will serve as our router for inbound traffic
  # but your personal laptop will be used as the DC router
  config.vm.define "u1" do |u1|
    u1.vm.box = "ubuntu/xenial64"
    #u1.vm.network "public_network"
    u1.vm.network "private_network", ip: "192.168.33.2"
    u1.vm.synced_folder "server/", "/root/server"
    u1.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

     # setup interface
     ip l add eth1 type dummy
     ip a add dev eth1 192.168.150.1/24
     ip l set eth1 up

     # setup routing
     ip r del 192.168.150.0/24
     ip r add 192.168.150.2/32 via 192.168.33.3
     ip r add 192.168.150.3/32 via 192.168.33.4
     ip r add 192.168.150.4/32 via 192.168.33.5

     # turnoff ufw
     ufw disable

    SHELL
  end

  config.vm.define "u2" do |u2|
    u2.vm.box = "ubuntu/xenial64"
    u2.vm.network "private_network", ip: "192.168.33.3"
    u2.vm.synced_folder "server/", "/root/server"
    u2.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

      # setup interface
      ip l add eth1 type dummy
      ip a add dev eth1 192.168.150.2/24
      ip l set eth1 up

      # setup routing
      ip r d default
      ip r add default via 192.168.33.2
      ip r d 192.168.150.0/24

      # turnoff ufw
      ufw disable
    SHELL
  end

  config.vm.define "u3" do |u3|
    u3.vm.box = "ubuntu/xenial64"
    u3.vm.network "private_network", ip: "192.168.33.4"
    u3.vm.synced_folder "server/", "/root/server"
    u3.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

      # setup interface
      ip l add eth1 type dummy
      ip a add dev eth1 192.168.150.3/24
      ip l set eth1 up

      # setup routing
      ip r d default
      ip r add default via 192.168.33.2
      ip r d 192.168.150.0/24

      # turnoff ufw
      ufw disable
    SHELL
  end

  config.vm.define "u4" do |u4|
    u4.vm.box = "ubuntu/xenial64"
    u4.vm.network "private_network", ip: "192.168.33.5"
    u4.vm.synced_folder "server/", "/root/server"
    u4.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

     # setup interface
     ip l add eth1 type dummy
     ip a add dev eth1 192.168.150.4/24
     ip l set eth1 up

     # setup routing
     ip r d default
     ip r add default via 192.168.33.2
     ip r d 192.168.150.0/24

     # turnoff ufw
     ufw disable

    SHELL
  end

  config.vm.define "u5" do |u5|
    u5.vm.box = "ubuntu/xenial64"
    u5.vm.network "private_network", ip: "192.168.33.6"
    u5.vm.synced_folder "server/", "/root/server"
    u5.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

     # install quagga
     # we'll use zebra from quagga to help use setup routings on this machine
     sudo apt-get update
     sudo apt-get install -y quagga

      # turnoff ufw
      ufw disable
    SHELL
  end

  config.vm.define "u6" do |u6|
    u6.vm.box = "ubuntu/xenial64"
    u6.vm.network "private_network", ip: "192.168.34.2"
    u6.vm.synced_folder "server/", "/root/server"
    u6.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

      # turnoff ufw
      ufw disable
    SHELL
  end

  config.vm.define "u7" do |u7|
    u7.vm.box = "ubuntu/xenial64"
    u7.vm.network "private_network", ip: "192.168.35.2"
    u7.vm.synced_folder "server/", "/root/server"
    u7.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

     # turnoff ufw
     ufw disable

    SHELL
  end

  config.vm.define "u8" do |u8|
    u8.vm.box = "ubuntu/xenial64"
    u8.vm.network "private_network", ip: "192.168.36.2"
    u8.vm.synced_folder "server/", "/root/server"
    u8.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apache2 socat ipvsadm bridge-utils

      # install docker-ce
      apt-get remove docker docker-engine docker.io containerd runc
      apt-get install -y \
    linux-image-extra-$(uname -r) \
    linux-image-extra-virtual
      apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      apt-key fingerprint 0EBFCD88
      add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
     apt-get update
     apt-get install -y docker-ce

      # turnoff ufw
      ufw disable
    SHELL
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
end
